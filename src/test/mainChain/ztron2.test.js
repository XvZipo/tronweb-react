const {PRIVATE_KEY, FEE_LIMIT, ADDRESS_BASE58, ADDRESS_HEX, SIDE_CHAIN} = require('../util/config');
const shieldContract = require('../util/contracts').shieldContract;
const trc20Contract = require('../util/contracts').trc20Contract;
const assertThrow = require('../util/assertThrow');
const tronWebBuilder = require('../util/tronWebBuilder');
const publicMethod = require('../util/PublicMethod');
const wait = require('../util/wait');
const shieldedUtils = require('../util/shieldedUtils');
const {Z_TRON: zTronConfig} = require('../util/config');
const TronWeb = tronWebBuilder.TronWeb;
const chai = require('chai');
const util = require('util');
const assert = chai.assert;
const tronWeb = tronWebBuilder.createInstance();
const address = tronWeb.defaultAddress.base58;
let scalingFactor = 10;
let trc20ContractAddress;
let shieldedTRC20ContractAddress;
// const {shieldedTRC20ContractAddress, trc20ContractAddress} = zTronConfig;
const keysInfo = {};
const narrowValue = 2;
let realCost;
let shieldedInfo;
let shieldedInfo2;
let newOtherAccountKey;
let newOtherAddress;
let ownerAddress;

async function before() {

    // newOtherAccount = await tronWeb.utils.accounts.generateAccount();
    // newOtherAccountKey = newOtherAccount.privateKey;
    newOtherAccountKey = "04E873F2920C6282FA70D0B5F485B7F456BBCD07771DD64FD46958B5A7C6DBA9";
    console.log("newOtherAccountKey:"+newOtherAccountKey)
    assert.equal(newOtherAccountKey.length, 64);
    newOtherAddress = tronWeb.address.fromPrivateKey(newOtherAccountKey);
    console.log("newOtherAddress:"+newOtherAddress)

    // ownerAddress
    ownerAddress = tronWeb.address.fromPrivateKey(PRIVATE_KEY);

    // deploy shieldedTRC20 contract
    console.log("000")
    trc20ContractAddress = "TEK8zvg9shh1AQ3VpDGjnK3nBZWEqPtihT";
    console.log("trc20ContractAddress:"+trc20ContractAddress)
    shieldedTRC20ContractAddress = "TH5cnDqDH46ajv3V3N94MQYjfVc9icRxPN";
    console.log("shieldedTRC20ContractAddress:"+shieldedTRC20ContractAddress)
}

async function createTransferParams1V2() {
    const options = {
        shieldedParameter: "00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000280755abf6db369dbb941aaa9df5b2fced9e23ca481ae446f1f3f46a507456e22c7c586a06e84ce16625f125ea87cd457ba1aecc39b963d4ddb07713b374008fb0400000000000000000000000000000000000000000000000000000000000004e0000000000000000000000000000000000000000000000000000000000000000184cf7d25042d5a8f44b898e446c50d5a5cf6631893bb9b9a4ff6c157d90938b2348bedc3385b48ee1892d9f4315da3821b050686a2056bcfdfb60ec7b2097072b9c793100e61f37edf98c4d20fa4b7efd30cd6b8d003caf510a9c4b5de2748526550a5eb66543817bae0c9c7927faede545338441094824082831888373756ac98fd977ae896031cf58b62a10c40358da555747cf3b165d9abdd60ba7e12efc3b1437fac62a043354b90857704190f50afac777eff9e65ec537ae37d6bbcf0d8cb2d001ca54c43d3c70e40fa248809d11e651468c661d7518fb83a6e9033631314e6c0e123d931d6a7b4678c148fb513906351dc211396db8f0b0c423ccfe5d96ca29538234184a32bcfc88da2ecc7bbb40e96c1e3b8c9d54e8a0892e7581752bd09716735554ea5905af6636e72274efa6277e5a4789491660f3a788334aa3e0000000000000000000000000000000000000000000000000000000000000001264e44e2f3d4dbd9310e9ae28f83b2d600877198593e063e010347bf1f5a7c97c7e7b087e65615f132e7995f2b46325bd4bf529463001281c60153e80a243d0600000000000000000000000000000000000000000000000000000000000000029a64f9f0864edca5f4dbbc5b009d44b9656131de95490d878de7cf7f5e865022f931a0ba47a05d7a9ef27d48b56679be6453a8e51b848f444925822e40aa3398f8e170edcde4fd3b075fdda978fb596f6a55613b6b880e10df731aa67c1454bdaff5248af4f8a4402f3dbfe673080a8db1a5acf3ec4fc17b297c31062cf9a217136795ed679bb0b51d8f6a32a8468255a821cd8df5fef73780c53abad63a93f724b0c80353cd8f7bbe5074fe0a1a7c3a6a9986275afe4f68b48c7ba5631ddff70c3c9d33fd8d160ab40dd20a3202be2cd7d232cf5705f4c356cbb6eda11f1d67e0c8d5b8d98ea602b90af860dec8cc7fa4adf99dc0b301864b6cfcbf44dad7d920696a63446378ecc74f180ab7e24ef622b2f41841c6c3130d06308051a12ee198bedf50c0af66077eccf252851ed3a54f80f6db3561c2c697b948fff4cbc557d53ae3caef139ccc042cd8a85bd84b64e63c2349624c6af5bc8d5524c3dec43de146c8f2a19c4d76f87c3f56ba53cbef2c7692e16f4fe0ab43f90f82291a4c4e849fa3b097aa95975a31b62114fa5fb6ac1871eae033db246006925c9f34a54123e0e9e95abd9086ea8ad74bd643b57583c42a327d91a596b578ccfb64b242d6fc909a72a181ce12fdfc48f0dc981e5b8799d503c1fa4cff416d6ec730c6ece412fa02067bce7b907e89a4c2ee3f12096e37cb731bbc646d6932661f861d17695b3915dcbc5346a506942cf8535f4066b100ca9a3b1642dac079a9142c41d4455636abc029b72c3405c2d89414f0ff212d1fd5e1b4ad46949ae41ac31253012c00000000000000000000000000000000000000000000000000000000000000027e9c4f0db9cccc4642b7e1cab3f0dd7fa9a7b3aa76e50add4122aff503fd345fb181996d03a14ff4edb565706c85326382045d54214dc8008355b22cd189451fdcab13dc475eb00a40dccfb79ae49ecad7e8fcd31b83de19431f3d86a6c51f6e97112fae53aaa54b4cbd992c807f60831b3519040ecda66757644f69bb0c655131e7c96d7a71db450311b39b4bc7dc29696cd08f0164e83595b90be5c75fb311f99fc1af8788d0adc5407434e598b329cd51f6b132d3093baa56ca25d34afc331e78c6f793e54670e47d264fc88d242c421ce148fe72e339fbfc401ec0110ece1e07ee06829b33847340352c657e63398b60646e43eee48491d2d5add9cfc67f61ab00b94b4375a8bf21bda42d922ed8de5219391daeafb729278dbf716c158c47cec22b57d28aa14e09b2b71c07528255cec36d2cf6d5ceb8e7d3168df58f2ea2b9a851bd21462b3eb046c4c38ed2d1152c1c484a527f7be99ef4aaec7c4ad9f0f76ce5c1c7d5dd48352f27a4be55e5c67ee83f1be8265d8707484c6574b4aa1db1a12801cc12e88fc7978b4dad617f24a380c7659247f858187ba388c6be040f09f4c9164b17a44f4f03a3eec66e9a07c55c57ec580b9616d0d1d9e51eb797309dc9403b4c74801b5a0ebceaef91e7db7fb0994cbda754abeaf5457871867752e87c16fd4a12013ce42f13ca516251399068945a20e888aa67d26aa7aca5f5efc9ebf2af271eeb8bbcf1123ac7df9cde3910319e178adf42809fb75f3fdfcfe86c788e988bcf0613a187a41a21afd4eab9762336de9e52fcdece63a7f4778c6dcc034191d9d006e61b0a1171b2dde2d9e6c9706a461b20a91c0621063396b0db0ac8b951921a15df9a6ec962ae8da48630dab0f113742dd4874817220adb3f725793b9dff0d2f8f0c9d8c149b990c4fd2ad5b700000000000000000000000053cb4955f12688b259bb9af7a2a0f90c08904f162a9c666b486fae1754d5629e11ea306e5c0fa0d69c023c64cfba6aa2fa13bfcaca52a95550af86fc11247220ce772ed76657c66e13ba6cc3b6fee58f748fa998a9af4474440124e63d4af9d65889118ce03b29cfa4250bca9981e4f494332bc672a06b6f9a667d2126fa5b672b15136c34459d0fe84d8cc8e35f97d3d395fcb7e14df885ed6c0b8075fb00cda6d8ed4d49e76e10530ebdceeeadcc442882aaf5b57ad4bf11a18026cae2dcd6f6fc69508c85547109893612e6ce6e8d92c68ed932bf9dcdcade73947fcb05e21544fdb7f6e7a320a619bf28d75b51e7677fa986222b810619956b510e98da7f47ef590e09e36d9a3981925f7b4ca8bde17c2092ad0c8bc7fb86bc14cc3cad6e607c018271f38638e94680785c1ea27c997a94510acdff0e3282bbc88b532ee5db579afdcc979f89c888723744858cf92382cc2dd90e0fb6894c597732d1cbadc54b0358a1e36f23d676b974c63e0ff3fd8cb666709c856b49bed8afeac0aca0281971d2b25d45242979eae2759d219e1cf9f50893f5087bcf13baf3c6e4ed6481b81142b91b39b0ec00b2e9b9b9181ab953f1f75233693b1a86cf9d882a1ed732f472bded175c5268523e863d00da4e4e73e975bafa9463caecc6b5781e57ba13541ec9d16f5385adfda20ed94241bdaf682e98a45accd37d64f7c48c16186f9caf2fbf4188da4dcfac13f8acd7f5e18d8826ab45c44a89ac453127f8b76005ad059eb910df6f27f53aa77d88c8f8c2bf8fdfe840e6c798e74649b0be2814914c1d019c783491cc3232f48861bb6b08497e8030de6dc162f8335987a57e124d31a948994607222ca304cb9e6977b800d8db1a13edf1d81f57a7da87b7b36f041a8850429f118ed87e9c0dbf8351463df6aaf60c000000000000000000000000",
        feeLimit:FEE_LIMIT
    };
    console.log("options: "+util.inspect(options,true,null,true))
    const transactionResult = await shieldedUtils.makeAndSendTransaction(tronWeb, shieldedTRC20ContractAddress,
        'transfer(bytes32[10][],bytes32[2][],bytes32[9][],bytes32[2],bytes32[21][])', options, [], tronWeb.defaultAddress.base58);
    assert.ok(transactionResult && transactionResult.result);
    let createTxId = transactionResult.transaction.txID;
    console.log("createTxId: "+createTxId)
    assert.equal(createTxId.length, 64);
    let createInfo;
    while (true) {
        createInfo = await tronWeb.trx.getTransactionInfo(createTxId);
        if (Object.keys(createInfo).length === 0 ) {
            await wait(3);
            continue;
        } else {
            console.log("createInfo:"+util.inspect(createInfo))
            break;
        }
    }
    assert.equal(createInfo.receipt.result, "SUCCESS");
}

async function createTransferParams2V2() {
    const options = {
        shieldedParameter: "00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000036000000000000000000000000000000000000000000000000000000000000004006fe6887b3bd2ede6bac543b7aea9b67c520b968968667fb777b7ca2bec264d697da03c8f6e40d5c590323cb673a101651fa3f8bdb93ed82e9bce8ec10f68e8020000000000000000000000000000000000000000000000000000000000000660000000000000000000000000000000000000000000000000000000000000000223a58e949d2a472c359c0780b2a74d786c22a6e2cf41c9401fff87107c0040960be8b995fa22c89248d27571a49f36e858f28161e2a72991a59e7fd8bd1b3727f61a86b1e75a33b6147e95cc4f5216e141bf667c676b3c8031b06d4fbec6a071f500fa2cc4b3214c23d6ad4b507c4308f41aac05e7ad26ea5f0dc12281606bd6b2f98b47ad31085b2a569a6d09b6249f67d92140dc29716fb1d95468d8ba0ceeeb9cdf40ec52667a42bfb589c5823240b596f5f121ff3348e235c3e1a9954529577ef335284448579cb10f7e978e289a21a6b9740a883e00de42bc9b8f0c528d10e4879e131bcabfa6bb882047dd6d72c029c3d9df0a6b9339c58a2b3f73d1589b2d2d85d96d7e2a1c2b02c0d91c48a6aa889deaaa483cec0f10b1b32af52a9c82056e4235d9d3c9da0e2ab2148b8eb68e94bc200c95a4b28b723a7a261cd034a37dea8a170b2f418a763f01b14ec76f1ae372554ab1bf39c8050ca6b940c5370be8b995fa22c89248d27571a49f36e858f28161e2a72991a59e7fd8bd1b3727fcec2392967053a43bac241ec5543933e30060e18aabe1d1d809cc4b4c4012c7277a7a39a9452fdd5a9f154315ee640eef1a833d8ce3eb920e5c4a93e8af8abb924752e42c9bea4c1db53161e388fc3d6358ffaedcfce45f64cd219cf653d8ecf6e008f87d6f5c7e053a7332d9733364b40201f47c41c5f7673107942e3a6666d4ec55ad603af88e438ac95cdab62af9c4877971ab70b1194df587dccc4dc0650fcc5d171f3ca857c03ae65b47b076867950b7f473a8a70e822a5571079a59a0789affe302bb3f62c3394e0b1daead2f86c97589dd2f29c266bdd613743852589927a1d66d2feb0a147cc99c311ae7c3b686c4625c891b0a160c4c403ff706e50000000000000000000000000000000000000000000000000000000000000002e58b35006c0e15a24218167661915b2521b57911402f1111f26a6ceae54f443931dbd04b4e7ef16bad18951fc0cbf4a51ae7b1692db43c932615720cfcf118031831c56c12c1c1c86a9a1ef5594e7aec65d6fee2bbdc7c0a9ca4133f8e08e6b0242b9510ab9b5cabf89272f63a0e86f06b40758bd340f96144345a281b10a20b00000000000000000000000000000000000000000000000000000000000000020b017bb98f16774b52a172938db8f9bc534e021265d875ea5b340a1706aa9b6765531623aebed68a6f89400de6d82723eb0547c704a53a117204a2d49fceb11aab23446c94a66d0b5cbe6dc988e386dffafd43c0ff5d1c780494ca4a8c7a9e3ab2841e9c98b6d0ed8fea78127d86ab5b9fe16895ab904aa500c05cdf44df0f48ecb7739539b36289aa901c74a429f80888031b67db68bb0cc73c7fd4cf88544ad5e01a26a1ba6f8f34c2d8b8dff9a26358206521fdbb530512c15a13e90f0c401324de4ecbf4c56bc963b9e0c7c01ec00d9299452d594c15e90ccab13277632012b6b624e453be8e6d0ebb98deb8d60a985d0069c0309a82a0036cab6af2cdc2a2c5919b5a9f201a4ac8887ea897a5fd2fbbebfd2270c08ca0c4f35248dc2f2e42367a21da16f18c3cd307d17f20bd779e42315a5738250ab913ee3cb0a4143ebcdb8e039b62d027729bc82c8370dea0180d882629a0c3b252d6aacb218a7657ffcc01623d90276fa7b2055fae9cf41f39db036d94150859927e453532e2bcedb7e094c4717dd0da84d96df4ad84c488f190577a7dbbd05741bc2744b667f010da294fbbc0217fc88514a77ae99dee49aa70159e83f7967bcf43d1ff89dd62de0a0f743d9f1e23ee56c3a47e3a439cd68665644459706117b663e4e1e516b2320f59f1918cb62e329c7d143cef359b18107a56a9a083063debae420b32f32cfcbc008184105dc703792acfcf1c41a9c09799e2cec07a42e2a80b5bda65220f12e242aead24aa5825b49baea7da87f84d357a6a722396ef2b2a90e1a19a02882400000000000000000000000000000000000000000000000000000000000000029b35e179a99a8484e8aa20a00d08fc8e33f42b1ee538ff1109e58d57abdca68fa62e57e17e279b0d835c25e195a42cfda18d9a474181686dbc57806d01df69634017c088734d7b11deaf7d7a0a7f0dd97fd19c0b17aae0799f45ea69875062a033eed172f5652c6e0d571e4e8ce3fb5a96d970e35fcb3bc1013348806bf16370d1eeca466c77f19f273b2cd87159ba5fc0d55dc8f8606ecd5cb87e7cfd39213b046ea0150a9e1e2b422bc5a850a05f8ad020bc5d9a8d513bdf1fb27e0834b5a22b20c9fb29f11356177ac2ddf6c710f888370e116a8c7438638abd28d577fcff876651d7ba870a92a718c9d30f8220266947c93b89d74a85e015ecb9f5dda4f96bbf97aeeb67f9dc27b13424610e4553fda636ec192a9951ca58b58172bc58b02bd04807047e1b996bda12dbf6feae3cca2a259c645918f5f22efa617c422b8b462e491a28247ad429cbab1c6d9d781945a381fe3de0e157063733ab8e178dde8e98bbcbe2ce8db737e536ed1d929ac11f8e76e9a2879de8f9b67317684aa6d87ec937db12890b01612d112d6c0521b043f09fdd4c0060aa5e3898da1e5bb68ef45ca3be07d367b008543e0ffbbbb3f4e887a6abc7660d60e6d1c97fb8c5468a7d396b636125484e142cd982b1010c54ad284447f195759771182ff8ff6f7d82909ba0720c17e05497425cd821b4f894ae027e739fd9ec439582709f9c5fae02fa284d4e306c72da6e2d0508c51d6b9759c80f155053da440a690c6d712ec5afb7847aca00dc3619e4f8ca80f18e31cd400c3217ad314c4481b5a8c54b34aa3bd595be4a4220e3b7c8b26c19816099f5d02658d364c62b98e0437ad3be0a25e32c60b2398456e8bb2b2a0eae6ccb30c8eee68fba94e53c48aed52ae4711f68e5c328c5e2cb02875b428fde7c440bfc1544fe41e9000000000000000000000000683c8001bedb70f6c1b66b5dc67146286b3e50ebba7de0759af9f39c2c5b803b3938ce7313d5d4791c4b97a4d9f2233c03bf3b085e8cbee1d3609a2d3238e474e431c4c8d473626c18aa4dad91061d107324ddbb1ac91585ff55e98be8a1d914d8a604140b43bf054de6c4589ddc833e455f0efa4c5addf6b233cd798312ba0992b150a612d44f3123dd2595b44ac5807b84c7e1499442cdb33bdcedf6d38fdaa8b7f2e7d859d3143eaabbac449e16b93441728837fe2b6b735985e1978fd222b266128e40437bda87465d92b2f78259507ab6dc45dadde994c41e304c7973a4afca6ad4fcfeaa1a6c35b7d9719715fbfa73e71594c28a8e084cb62bc31cede4bfbc6d74e3a7528a9c59134ed0b380eb1d5f6bc285e545d3d4541801fdcf5bc135530b0209fc144f3868a026e1720e09d183f1691895605eabb4957bcd4389b08c4b6552eda19a5c9bd7b33b44a95a995917ad94dcf64ff78bb789bc49591197766f67a82a1dcb4fdea8df2f223257659131c5bf1d975d3d78a9843b091f8b05cd37bff16feb811fd9ac6b5fb22ce39899e6a038951f8d674d117637f418f06f57dadcf85f7bf1ffab2643cb892a3e58d8249555ccf8430b4dc0c024f54091eeb0fd6e8ff70037962379b31a70f67aab68423a8dcf315aa9def9395706ab4513d2d6a52687a9fe498d0092c60cb52f705f3c77b78fdf5c18979f77ea03bb33594dff7c4e672a46fbedc9a99121d9f34011bc62f6af1671029cc02e24a6fde23f5032545dd5a101f57c8241da1117786323f89fd0a82987a5097358ae9e56e989a7cff71062d71f2d99e4b0ef6cf27a058f70a4aa2d7da26721851fddff91993abee793cce076aa3682c0ed15860c2d7d9b299ab5c7a3ef42c0555092a5e867282de5988f2fa30dfc578cb604381ad310c14a9402000000000000000000000000",
        feeLimit: FEE_LIMIT
    };
    console.log("options: " + util.inspect(options, true, null, true))
    const transactionResult = await shieldedUtils.makeAndSendTransaction(
        tronWeb, shieldedTRC20ContractAddress,
        'transfer(bytes32[10][],bytes32[2][],bytes32[9][],bytes32[2],bytes32[21][])',
        options, [], tronWeb.defaultAddress.base58);
    assert.ok(transactionResult && transactionResult.result);
    let createTxId = transactionResult.transaction.txID;
    console.log("createTxId: " + createTxId)
    assert.equal(createTxId.length, 64);
    let createInfo;
    while (true) {
        createInfo = await tronWeb.trx.getTransactionInfo(createTxId);
        if (Object.keys(createInfo).length === 0) {
            await wait(3);
            continue;
        } else {
            console.log("createInfo:" + util.inspect(createInfo))
            break;
        }
    }
    assert.equal(createInfo.receipt.result, "SUCCESS");
}

async function createTransferParams2V1() {
    const options = {
        shieldedParameter: "00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000028077d9dea3d33b74598073bf35d94e932c5c2fc303187904ecee108451af7ac2037d9afe9bc8de3e6817fbb9fcc8e200c893aa2249b4f1642d76bab8cff3050a0b00000000000000000000000000000000000000000000000000000000000004e00000000000000000000000000000000000000000000000000000000000000001c6a1493f6913a4f8a40ae2fa05efd567fc7133e23c85c1cf255d87e9293d4acbd9a6e4d2ce0048ae1f681b5bac06ebe3ca0f01758566b504a633d7e75ab2d60538584fea1b1ae2cdc71d50cf241c988e9a9d804b3854ea47ebdc8902e0606590584a6a33664d60fb44f81aecf94aa79d5918e7046643e40c48a17f3f2bf4f16480cc18a8a17c2c72dc1d175efcf377f5d9787c8a20cc181a701f197bea737f9946d04b4d1ded257a452d3b31726b92cc9165d7ccc0b56db843beead1ea926dbabf63e74a19c27fd3f62ba79ff60a09bf5678569a6b9b71012649f6f0da1121970b0dd32a30d50f178c5c09653edd7251fe8538d37d9ef63757f32a8db77302ee9b41363f2304f9e72f0282407285551fa0dc84b20b6d2761eb29ad53a9f3404e4d1339daaa38ddcb9102f31ad083bd862cd9c79e19c57689e2ac49a4bdbd17990000000000000000000000000000000000000000000000000000000000000001bf4259f38d7b875d5b084d695effd5075244e2f38048a5da2f1b96512e1e036a02e05203c7f36cfedfa7b35e5eb2d20c5bc1c68673005f9546aa1db289c33904000000000000000000000000000000000000000000000000000000000000000288d719546672fcd42a7b86e02b60944944ed04d8a0c1dc6bb36ac60735ea562142d3dcff0ac2bb0064a3baabb9d2f59c199b201e788fd8302bf4b21884fb2f1c1ca87fd942c786a2c23af84931445ee9427fabcbc1453e6ec163479e812b761e8fab01f82fcf30941c9629f7b46e93ae326732540e75a9e3e6f85acbcaa0cff997166bd1eb58f22a3fdadd15a0291925b6b340000e8a03aa4aef6818b6f7a470c3f70ce73c109f287f4575bbda2c4a2dc5658f9ee1560a825fc1c17cf150fc88015c9366a745ca4a9701a0e1ce2dd5c2d08b6df7f514c6b80f10f2548c29ec9dd7bc90252cf8c9601ed78fef57d23b999287e09aa571fc39c5d3b1b37324d0f1c3fd4d4fad20f4ce57b6fcf1cd3f2fef3b3b46ed0fab116fb375a0aadbfcb17c58801f2dea58553a03e8f9379f1ec7b805da67392aad015b61f9815caa2fbd3df8536240ed09887c7fe122f63a38126a489e40eff3097ee36d1ae18ca414fe664c68712faedd2fac60036455fe74c5f948408e7ba65f9cdfbe0ef36b76313c1fac6b298cf0a32e16bb0c9ae6d2f6d292d2cd92281a2ef228e3efb4a7781f0d9f9a37b6ab93a68d180ea29eb5a89feaf6a3182ec01301184d24cdc4916aad873ba8ff1f2f49730c49a2448b819ce443a1de3d15afc05ca2a9db7cc91e0935da150de6a703d986b3d27990e14bcd4fe58a5ece60254f46d9c4d1993f4038ab420c03a8c6b136126d496188666ca1d3d2e0908677e34762220f248ba2d009eea8b7e35d931084ac1d2532640345b68f7515301bb30dcc7751d3fbc30097df9d4b370000000000000000000000000000000000000000000000000000000000000002187aedc55dc639e1e7a775eaf86db0c45008b57dbfd9bca7b146deb93aba74c6f040892d1cdcc88b7ee019bad239a33885221b7741a666fc0c1235a37af278719cd18a2510cc805c8e1cce1b39f118591c1ba9d1d54f528fa7461003bc0cf341ecbced61bb95c83e5f9c77c84f69d2fb5835b6d696d9eb820962b4794d2ce94666fd205c302e8a28a5c17a2bb00a564694e2f15ad683977fcb74e8811f48240612dd752e0dd6e741c6359959efda59461bc81ad41f7c59076350d4e3b658206634d365c092921364ce56d509fc2dfaded7eba9ada752cb9d0e033fbb27502ab3f4ff8853aaea3c553ed31f3535d01c99185bde6ff25a412840f02fcb7c687eb0f1448e4a0131997c69ead3bd7b3d2e7f6719a7a18e399341b7a7713825fe2b7f66dbdab837b0c50c208936302cf4e9a08f6947c0a351ac17b2dbf3a437dc6feb16640e9224552775c7eb6cc97504114adcef78e3f85d0b35c486ddf6b98eafeff6afcb8c8721226b9900e88214365a3af2116e39cc13470942f15d3bd7b5961b296dde87debac130ac7d258e1d66b533f9772534ceb59b5d231e38f7eb65c42cdf6b4d14d23f3233a2af4d0cfafc3a0689e568daa3295ca7eec0dc8d797c98fed033091561fc8e5c039b89f19da5b50ef0759dd8e5a57f1d708a38876efe725c8391ea0fe981b1e19462ceb47b53d440d305bbe1e6f466197d8289a28139816263f265c636529d12a676f47f311ebc124328c288035e4436c0ed4c265afcca3dc5741b89d8706083e4f139ae80a9c89472c93a77f27b30383d74c5987f69248e918e75f1c6ac6d61bc9e923363cfc3fa8c4a09cb2de8e56ac4d3b809f5e6bd12bc250ffb3e7e8e06ed0582a99705e95aacba16808670cdbf48fe9ac9becbd35bb7ba655e2ffcd72fe2f25232bd0d6effacfde18a0000000000000000000000006dee3bfbf254545cfebfaec74f19a8f8d902e35dc29f8b65578dc64768f42dad6603a9ba84cd0fb72f18a1ea815e96e2c8db82f03379e6c70b5b15d63cfbaf92620837f94dadaedfda79773bebc7adc879ab3de84b1b41bdf54f58555239cb2cf052530f27c5c151f7696e9359a9f02dbe43bbc41ed1ede03b8fc466b602d8a98a58300d3d05c02a369153d3a10da07e2eb62da5b757a93b465028ae728f5cc89becd50f377eef087cd91bd2fbffdab144a1fe8653a5057912c003f05d6943b24ba375562e95abe72a834f8e34351bbb8ba794a3598ee172f9ecdd0fef8c79f31e736c650be1c20c273e3c270cb729d8ee45930b80282f477cc6f7acd2a32a59b9c386b246493e77cb4922edd4feabade4f6e0e41ab99c6aa133224fb3d06d8aa04cb2bf6a24804638e8bc1060786fdba5de6d4ee0708e4b3707fd2f8dc3b98efa95cd92f509cd65cef0f477c3491aa747833ed682a3acb67b7abd6c4b5574194edbdffa6b57ec8d1b4de591057e260d7e8fc31f3cbef54fc3795249a0d7cac97940706cfc7632d35907e291eb680932cbd76ab04369ff3b2e56251a180d7ee464b4c6dae35d14baba003e622d9accb7b3624a4c8c1e6d173b49ed2ba4d3aae52e0a475b389272f0c633993a0aab47c4bfbd6e59eba50b3693954e456a7a3e1b184d52f5da0c82ff8d172c101dafefb34269b5056442b98ffa2ef8f6822b4a09ada3bd99c12c4c6f0da99300c4ce336a86dbe0c5796ee12253a3015f1fb6e634fa3cb1d1391d4f01b632ae56325424a18d1dc251ceb51fef2c7f44871b3bd8b2244c45221b71d95d34d39ad27ec69c789acf64394c6d4675fbf330b911b49561c24564a20bd10a21ad00177741f135bf38e0bae402350c878473f6b87f085093ee4554638ec30c57be6e258baf160368929f9f41000000000000000000000000",
        feeLimit: FEE_LIMIT
    };
    console.log("options: " + util.inspect(options, true, null, true))
    const transactionResult = await shieldedUtils.makeAndSendTransaction(
        tronWeb, shieldedTRC20ContractAddress,
        'transfer(bytes32[10][],bytes32[2][],bytes32[9][],bytes32[2],bytes32[21][])',
        options, [], tronWeb.defaultAddress.base58);
    assert.ok(transactionResult && transactionResult.result);
    let createTxId = transactionResult.transaction.txID;
    console.log("createTxId: " + createTxId)
    assert.equal(createTxId.length, 64);
    let createInfo;
    while (true) {
        createInfo = await tronWeb.trx.getTransactionInfo(createTxId);
        if (Object.keys(createInfo).length === 0) {
            await wait(3);
            continue;
        } else {
            console.log("createInfo:" + util.inspect(createInfo))
            break;
        }
    }
    assert.equal(createInfo.receipt.result, "SUCCESS");
}

async function createTransferParamsWithoutAsk1V2() {
    const options = {
        shieldedParameter: "00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000002803f3d0772badb44ca9d4f5cee84b24766ca20c7529b45a053de06a9f3cd8dbd81576af217f12e050639dee08c807c365b0e4f6ec2fdcec1d8928ca4da7df2870000000000000000000000000000000000000000000000000000000000000004e00000000000000000000000000000000000000000000000000000000000000001b57234dc399ad0ed80e8ad07e9d9e438477f06135e62a6f51c1654dbd18159c11f88bb99b26419dbecd6f394cda538247624457233d81e7ff534dfa8ca92b4685047449fb175bc62edc0cc9c4408ff0714c11140b1de120314ee909437240364fcba1dd66e868809b7d107df8d0e008c61e382f2d6dc0431b4ae74eb481d0bb0a8d26ba5cb5491735e0bea42b88b48752231c1e46b47156e87134d969081aba670ad4b05deb1171874a72bb36075b460af913b5e4e4883fdc56eec4ab6f67ff38920e5a0cfaa4e7916ea4e71a7001bb55ba60af1a707e7746767279c132e53fa0fb58734cabe2c76af3d03bc859eb49cdb6cd68a006cddc9227c426ec37cb03bac19d935c0a31c2e7bf83a8af56cbb27ac8398de666af2ac80b9a6ceefc01bcc3758d8d532579dc5d5aa237f3a0a9bd4eee2353214d2fe057dc78304a97aca0d0000000000000000000000000000000000000000000000000000000000000001cc4d8fbb418f48d949ebbbc1a76efb068020169967e988197306639c1c2f88213919c0e98df9d52d8df76f40b26ebea602f5a3e4e7adbeb884baffc9587036010000000000000000000000000000000000000000000000000000000000000002b2c340093fd855dd577b7291ada27fd5fce05c30d952103d3c57d3b5400dbf69bdf57a5205b2023d6d17c9e0c99555e3e19e2a85320d2fa8ab5993bfbdb471a94ff11262ab7466d510c84e466e2106252549d003349689c03440471bd40596b0a2eecf50fa15646b3fd258b86ed15b1c0e004971e8e0b48eda7c4f9d8c3f73fcfcbb7ba15c7364547538342f3a71b814b481c73bd84725845789e801138b6a6fcf772e961b4a67c73f45dfaeeb971f7952b601a7f0352ce936d0f9fd0cf156c002236e4bf406716c47b05bd8fc7899ac981e9c5cbbe37c978f2f1debcc6ddc73233a88cc281856eebb10b1c8df32ba888a2230f01c1b1ce73f5e8403b5230ca1bde696266d57c166a6111dcd743b8cbb12f403748407fc216ba4cf814de81bf847b9702d58010df975c30ff6bee342130da6fc74c69c836f98fba2db4284235da043e6366f5aef747a4d1d5a4b20face31c894936875f4dfa816a3b30dcdba18dc8b872b5a4d748d88c47bd5d2636df86259a272e9d11208d2adba656c5c059781763cb68ca3903b0191be2e0d178ef3cf28ee228fbfa2dc9b90d6f8a27e56135965e985195e5a8c02d3c8b6748c84e883e3e3e057c1734240814be97cd729adc36db9f2ccfe8aa271bf5f610bb5031ad90493b6afe2b3bcaf501abcdfa78f32069e8a5fa63f93d097cd15d7827b8b9d761c96fc0c51820ec5b6420613fc97965b789ab73e12df1a39074e6c57ad2c5389ca2b49232cf0707c5cb6b2827b542747756090abd9a7eb82e319bf8a3f1805859dae436569b7fc881a4428645250690000000000000000000000000000000000000000000000000000000000000002f1722d14f80896154f3c16d7abb6fa804c62923433679840b8c8f28cec7fc557e768891881ab0238259ffd9adbc2bb11c2d3d877c27e7c27018f484b16cfcad1872af2b1fc486b9035e6016e7eec391bb25e1976a4b49412d5b6e88904dd46f7ca2dfbaeae35bfbfa168064847964bd2ce8f54ddcfd1fd83bfc9c0a196a656f69965570218016037ae0a604b0de87117f645246abe0a853cfb4c8297abe258085f46dc415293624766b6695868fb583cda3206f4a04b13d24e69f31e702c8679c8193ae103a0e665e0f993772a36002d03c6e764749d003d0624c57a1224f76acb5c41d60e8c9141cfbbab3ed30aabe030b84252ef4a90040040bb25e61569d2462e8ffeb089beecc90e2b741124c1c2a75cbb7b84f76c69ab5b51bc14b3a5dd5e02570d77a6a98a6077ea80930d45461bb2fb7a4fd823e98c34778f16572e67cf0021e1d0942d849565c1c733bd2955e25ce9b4fe9e552039b4ea6b97cf0e0eb9cd284fca18981858addbfb1508b062a46b35de73356ec9d7390251173f7beb712477feaab9fe11e4ff74264de94756f78ac78fde9dc10efb0a16d862b4b81d74863890924d2e889857a6b0f8771356e06fd4414338fc4b8a206b0bb2acd1d9bf18d5430a02233cef4405b7aa88d205cbffb7f4963e59e2b6ede6a06217485ae71662ddea8cffaa8b78fb5ad6d55df4fe8014b8be43ea7e09128be38582116ebe564aa1f5112644edfe793bd27b94d030fa924953edef123de603b60f23ac38e24c3d8d5a23b7080b6541eb91d3c1e55a718defc8bd2f718ce0bc37cdd650cc6012e9e66980bdc5c0984f6d440b8f0ed16a6efe95940ebac89547922f2dda0039fcc15e1b9f4cbe7fcadcebe24070661c7e4c1e2a424ecc03362a36d57ca59b2f89087a1ab2f3f358f754204a7cbd9f705b06970000000000000000000000006b6c9f23bebc692af70927b60992415689181af8f4d2a81e0a3591d8001bba90182674910a7e58461198ebb48e7a62c3ec9e6290d92cf3f98aff5ca36c9e9f2aa6f2b4de027857115476afaf6b79b5176f7a9692cbae31f5aa4e2e3f8b30beaef83d80f37814e6bb68b01636d88fd6d4d1877812ceadaee9c38d4f11e3d01c45b9ea2209f2b2b0c1d15a5f7249a347405eb9e02bf87299d6e8deb65bc2006c7f29e3655466bc79a7bd8ac9d3509dde487ef34cc556fd01250d15d9c0db5f3c44a2c4c9db850bf8c2061090fa2be6e2ab2b431b8bbb72f89db21ffa858f8f0482c7a16b6d1a4f504a7004436ed83edc0893d4e2084d7ed1d3fec938c28015520bb94be4d1862c6638218643cf963e1189292a01a11ae2d1ab8c7e7852e232cc3f1c58b92a6d53cc46a44678d650277ea02bea682d0ce0f1b40ca0cdc7b138628055fa9805b4f1b65857dc1ac19dc323e25598d6d49563fd2b703a3506f87ae7d5486cc0336e0073d50c635d7e1094374b51883184667d2070b826497780ae1ce87c52a3a67b092dd7b82ac90763fd4fbe3744f82df751580363efec0bbdf1b0c3969a023ce59313c9924e61d9f1335f23b02bd761cb7ee14fd7b49267cdcbe457889e3ed7b2d08fdbe814332d47d49437d83b839ff75f5f2942269b436482ce2bbbe821b4d5056d1b0edcbfb600e4eaea4305160abe3c5566ee01094a7abdf6e51df533be3f599bb0f6c19d59d9ee6bc79eadf41909814a9d6cbe007bd333e9105cadca6830e6ac8b9ae4c1b5c5f8fe09c56d0a877bba01577ad8bf33ade8b24c704af2172da541a71f9f3732ea2754af5546fb9facfe06617246223c5cf41899ca9fcd2f48bda48ab19028f7413625d06b0e257db44fbcd80f8876a9152cb32c2446ae3b8c8ba68d7b70f309accb39a1c06495d5000000000000000000000000",
        feeLimit: FEE_LIMIT
    };
    const transactionResult = await shieldedUtils.makeAndSendTransaction(
        tronWeb, shieldedTRC20ContractAddress,
        'transfer(bytes32[10][],bytes32[2][],bytes32[9][],bytes32[2],bytes32[21][])',
        options, [], tronWeb.defaultAddress.base58);
    console.log("transactionResult: " + util.inspect(transactionResult));
    assert.ok(transactionResult);
    assert.ok(transactionResult.result);
    let createTxId = transactionResult.transaction.txID;
    console.log("createTxId: " + createTxId)
    assert.equal(createTxId.length, 64);
    let createInfo;
    while (true) {
        createInfo = await tronWeb.trx.getTransactionInfo(createTxId);
        if (Object.keys(createInfo).length === 0) {
            await wait(3);
            continue;
        } else {
            console.log("createInfo:" + util.inspect(createInfo))
            break;
        }
    }
    assert.equal(createInfo.receipt.result, "SUCCESS");
}

async function createTransferParamsWithoutAsk2V2() {
    const options = {
        shieldedParameter: "00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000003600000000000000000000000000000000000000000000000000000000000000400705802336cc7945393e87cff11f460373a4203429eba16d4a21bdbfb551e52564b83d400006b4223b08d3149175c7b7ef1fa535dc857616c9f1f8e89d4877b08000000000000000000000000000000000000000000000000000000000000066000000000000000000000000000000000000000000000000000000000000000027a9a327ef300aae973ace61570af37b282f50280f396dcd5ec719635a3b72530e9c854dd702e0cc595a6861f9adcb5c622e8a5425357a5386758174f446fa55d9a8c64f42e9fe6f493700a70bfb0d00a603dae7875f134d301a09d66e7521a903ef4fc7f9e8412f863f00f1ce649f06b5c61df263cc3a0f7318131f497ab187183ea030909044a1ea5dcc34386e4760ef66d63bd112e49b85cd949955574484374143c484270dd14c50ad6ef4035fca2a4b77df71e6852399a1daf7bdd7a82bf34067e434aae7b6c79dee8495226b98057d3fe97e5a1eb0575f6cffd917649b5061b6d70f7c042b7ba2a64a453e8b7467bd7e1e5b30bf3e0ef608421dac151f85348dbc59a10a38d9243ee8836568ad9b37167de3dcf0e624cc97df4409ca09742f2dcc64ee59f0e5204a8ada857d437f9456eed16339dd6f9a09e67636d2b27862165bcf88ea1e3e21572fae44201600220982b98908b37e95bae29a6c46716e9c854dd702e0cc595a6861f9adcb5c622e8a5425357a5386758174f446fa55d014b409c404b13163ba7829287ead56a6f85a2ed2aa8f62169f013770d1a34e95312f26938fab628ce87e5e5a35db30ee3fa5ffdfd92359614d35382fbeac1f3b0fc03a6239b2395409cd527294c118ec2506ccad78aedbd5033335099bbf90f1f63457cefcc3935639bab57e33a3e2094444a1311200412af5a1948be8f42f30f5af59d1a4caac0f9ffc6d4caf43e6fe25fb0053e8574e8b95d8dad4da2505a06e065477de7e6135696658833b022fdf86ecc05a2ecac2ea950f3869a50df89d07800360a509c5e9755c3bd49ee2a8d8cff4c0d750c312226c6b6ffd2a74c34f9f2fed59cf7b3d2b596db406fb48c30c262c3d9b1aafc32676da02de942494d0000000000000000000000000000000000000000000000000000000000000002908af09785a2cb007422764e805a78bb606bef2067829d5a43734824304cc0cacad7c4e7568696c765d0aae77d680d3a8acee3c0f870e178e7917e44630c6101ced921bb76c6aa43be46065d9a4cd60bd7ab648d10073a9275c2339619844e49d4b15782784f079677ca20187818626b81f77067deedb73eff9a8a83505dc60800000000000000000000000000000000000000000000000000000000000000020ad874c2b46ddd91766c3fb74585574bf08fc91cf6d8e62b9f66581ff7df5a21af0d4b2833e2cbee77eb5a6464dd385492d483cc26a6ac8b7e405e364c6cefe48519de788d87bde7c2ca89017066caf901efcb59f1dfca9334922524b9f56f3d99322e644e0b710384a1978388c80748b7b5cf52362e2b9e1be923d8d3c3b9c0aaec973191e91badcc31f18bd27bee06913c08e56d42be2c9db8867b771b640bfa595a1a0b2ebb5e76ae19590e8b8fda3c64ca387d7c861a4b5ce26c401ef4280d239a139fe6a2b91b7024d70e3aa01aecd0f6e086aff3c2934ffc7bb5e8c294d53cead88c62561aa3be972828890201a67758d47c37a5db518d40e8e1a706e50a12cd6885e772d09ddbed68c3a79c78a2083e31e8047bec982e7a11d37d1f3448c7b80b7291cb8b23535feb510ae81814be4ae0bb8ef141e81aa6595651e750286165c3413df99f24a66a074a9e363ca30b62c87b6cc133b8be2edf17d1a31504c5dae87e1e66b0ed4826008f8bc6e4bdcfc694ec2accfdaf2c5d7bbb059f54a60b8e22e4afa4dfd51a015c40c44ff138452decb6862479f890488c1ed588cefff3f0e9013a49058979fa0c7e55e12da04966f3ff537f53799a1154c63f236683d2a5aa3ad289e73eb0461a2852eb50d4628adf88e61ee5ae0e89c6c9c16c9a0859f02b5056601bb63767552f7b68b1c3337d6bc598ff5e93fcdc930ee0c648b4974013749dc8d22f78ae7c56dbe6c9acf9456382649b2d3334b91239721c0478fd38fe296b254fde23a7455b6aa6e55d07465cd72f98ed06a73b329325924300000000000000000000000000000000000000000000000000000000000000021437335c4668b75e30d5cd8c31f829fcee921fb7e2668768bac3667c7b97606e5763603e7e39c184aa0241b691c7f4d6d0670c29960794aabe30bb640e97cbf7ec854db5c7ed500eeb579d9d3a3b71080b78654653418e8d71886cf3b1aba73a0b86953550e6972aedfdcd3c5070f8931f7f43968a3f40a4e15bc0cb1c1897f70ca23d0e30f0b997fa0b81469ab892c359f4fef9ea8989cdfebf05b4cf65c7985e12e3352525c27ae48d590da2dd4bc21142ea9373f4415733bf5b81edd13438097f106298e6b710f108b217a817a96f84b5246ae453e2893ce01140c70a61d02d1c6eab0de319fb5d19aea2c97b74b1bd94b2eb86821791e1ce007310e6035e10c0bec63070c0fa7e1676be2288631cf79df0e597f764148157a00746f23e75ebcf9cb2bbab99a52c82383c26da08dd56ac63f7bc1367f10a33efd880b781f1cbbfc46ac677e073fbadb8c23ec8289522b94bfa88066caf2f09dcd309faa081a203456b532e93e47a7b3e50d8da7d456ca55d0120e062af249889957ddcb30121a47182e110d108ab59bb7a58f47c1c4f60f006cfff7fddbdf12f7802262f29b9b7f75be1e85c4de863ee73370f8227148fafb251bc2dd81f0edebb911ae1f6ea62512afac8a7fbbfb31ea45830a5b87bab9396818f03529bde6e4b6bb7cf78955bdc73664c8554b130ca7e231acbe30869ad8b40a99a30a9f21d670781481faf991f8a55d90ab7de56d0ebc4e9e7f62f01ba6f9b416b7df5b8b2ac5b67ce86dbe65c5843cecb8307e2e7ba869bdd3bb3307c4dba48eed0b9659a81c388c77ea72d456f2df038c55df805af41ba3d4ed8b92c3f7b22a0e06183b1d8eaa8ddc0a25479f50970a63a7e41cbeb3e7a00fa00ac81c673ff39396adb4fcdb8ed893c052ac566e22104571bd410cf9a827f05ac3e62e8000000000000000000000000eb0645906a669ec7adbe315eb1ec32ce1566c209ad6ffac44cb89b94a7ce86fe1c7e73d41338a69f25e8f26b4a8650589ca1032f435ea1b73022b295c5452372f19c7894b230d6bdbcf37c6183cbaa19a59d079596e0ea9435aded80265c126b3d1430bc0bbfe1b3c2dbc1572753d4eff0ab1eb13c726097f70e15a7a3bba981ef3aadbe5042bbef6167072cf0d75f79753540cba9b5a5b25b2627929bee846eecf1e29c9754be54bb401042b8a705dbe5a2f2d1e936b88073b9b431624aa89bfff3741b9c3fc32087690159b539742682880abd206682df6405296ac5039a77373839187be30c7f5edae62fada3fa369c27d5ed52c499d45f20782cfb7e2caeec510c66c0d30f20f31c17c59c990c415a94495c09ef23419e57d42c5ff4d6c6cf2ee6bc14a6811e2a2082d3fea175e90f6169e759fb6683e38446d88c5dc029e17ec010444ede1106e7d03df7173c21e69e20bdf540dee3c69d613dc269473e68daa711e526ea5ab833e8289ef6ea54190a3c9b47dad25a5e4de68cbf959a6f03f6c9a4503794b05919dddce764cc914e05664f0bcda6e1524c9b6de2c41f7b2816112b123897f5ca995dcd70949cee3ce82bcb997872e0d3d56004f769d08ca918ca0210463325ce572fd3c5ca1cb7821c794d0fbadd886aa712c534ee1329080edd018cbc5bc2762f4277f6f4b8a85dd968f970c8f8f1bc32463a725a68519a338b814741942a95085432bf5a9b48a3e4442f2b24be2b2b1b540243aac14882a8744bb7e391beb74c135b00d209ec0ba9bf748db340b1c090d1de381ce854b7bec2997d2f281486fbe1314ccdb6bab78413c35989e9353765466936333bc6a6d3f73d639a6da0500d0e76020708ba3ca3fe57e5193a644fdad004bf2adf29580e5057d2cb2591fae851a8358a4607f00e72de000000000000000000000000",
        feeLimit: FEE_LIMIT
    };
    const transactionResult = await shieldedUtils.makeAndSendTransaction(
        tronWeb, await tronWeb.address.toHex(shieldedTRC20ContractAddress),
        'transfer(bytes32[10][],bytes32[2][],bytes32[9][],bytes32[2],bytes32[21][])',
        options, [], tronWeb.defaultAddress.base58);
    console.log("transactionResult: " + util.inspect(transactionResult));
    assert.ok(transactionResult);
    assert.ok(transactionResult.result);
    let createTxId = transactionResult.transaction.txID;
    console.log("createTxId: " + createTxId)
    assert.equal(createTxId.length, 64);
    let createInfo;
    while (true) {
        createInfo = await tronWeb.trx.getTransactionInfo(createTxId);
        if (Object.keys(createInfo).length === 0) {
            await wait(3);
            continue;
        } else {
            console.log("createInfo:" + util.inspect(createInfo))
            break;
        }
    }
    assert.equal(createInfo.receipt.result, "SUCCESS");
}

async function createTransferParamsWithoutAsk2V1() {
    const options = {
        shieldedParameter: "00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000036000000000000000000000000000000000000000000000000000000000000004001c50ae91ff60a3e7f67d09e01552de29b97d4bd72b88f3372f3e443d65c3e7db3fdf7c8e7664a9acaee3bc556ba9962493c01696ca5815e498197315249bd10800000000000000000000000000000000000000000000000000000000000005400000000000000000000000000000000000000000000000000000000000000002926a324d16654c07912c84fdd50ef9627269149a7d006b0658baeb37b5338b7085983f202004bc84d52ad0f000ed2988548e99dcb3c4943e960816c7cf559e083aee6a0e94a225ffb25738e7145b487b0aeeffc151798b2f5c9321cccfd4d8c56ed164eeb16d1f1b31a935247cb06a733fe25e7c1466abe32f0eb60ddb3d5618917bc9756d6ab8c66fca7c957710e2cc953a2c33b39ec9c2b3e47583188b4359d7057b365d55905274c7482e373cba75a0c59e7b5a91346cba6228be54d04c541db5939579458c4043933be26ae412ceb2e740f1a457d31804dafd43628b75970e880600637fc5b028a362a5395b08362011b0f82bd48fd6fa5b6272f53e3dff2a7a03124b01857dbe1ddea847d981f4b566aa43076f9ef98ef4f4de60fdbf86c165e1b06b40496852041c116003b3dad6b2192532346bc741584f935261988d9e168744b3c8a8f0a5ca084692d04930f178c936892295f788b7e6eca2a080e985983f202004bc84d52ad0f000ed2988548e99dcb3c4943e960816c7cf559e08059a564e2df13e4ef1fc4b572e4b9826e07bceaaae4abb8b045bfee80eeb03b6f38e5599f56a6882e592fd023379bbaff9b27c1ee73fc4389da01f2f834782628b83ea9da2c7730716fa3e22834539d53f44e3b20fe29a371f2bec6f9a3c5037e0443ec70577eb17b8b91c8e100ed6a4a30668cf844af3e0520c66a7c57fe57eeb7d070333abdb9dc2501b39afcbf4c5c80d3d39cd7ffb412bf7fdce73202fd8060eb6abe691cdfa14da1c1c177189357413598bd82557eaafff290fdcd15a19fa861b7fb1a27ce17b71cb61a21d476292162aa67551cea77a9b1bbe9931d2da4710a533ab483349b4fafa135a187fc9fd36b0dd8e1ef5401fbbe8c4588cd6dd00000000000000000000000000000000000000000000000000000000000000022a0c6053e991a5ab0cf5d8f6e17b0766168c1a91f6da687c70b904c5e71481067ef1c617ecbb31dda09e044d5811a8a14d46912fda430fe3e9594929c1bde10da8c964af22fc8f78928707c7ef238ba546d14d73a8cbdeba1ad9aa4478d315602208964a0a33270b42c3dce7c8bcbc209661e87e916838a2eb2f22a246f63f05000000000000000000000000000000000000000000000000000000000000000153ce491883ee0fe9e368f47a1c774d1f37f16449c387c2d9b0227548bb5bd30d38f03d6cdda2af1290423d272febfd6cba7b622a5d6bfd8eae0067a69caa90c0686ff8730a6d4b17dcd2c39cb059e598e1d1d6ea7bc30c9a39d9a42a0ff6591bb4b09c45ad95a1bdd6161dd70994ad8b3e3e4ff31576a09267cb833166b9af6cf544632d92fc50523388ae87479fc0ee86bf54c731c30f1a3aef4f538d4407a6acbf147bc530adec3ac38068aa2e2b9168c9bbb449477f52e96cd9c5f95f398111492e09216eb3182f21d40f758cbd25a7ee09ee33b29638c965b8534876d092fd3656d5a89f7b865a665270a0b73679adc0577f12d4d997a4b2f176ba33329dcb31787dbcccbe7ecee70f9f3f5c9a7bb422d3f1e9537c5bf8f07c801f9b5f0c0000000000000000000000000000000000000000000000000000000000000001a0c066f4d4391e1ff54ae2ee3c7873fddaa799385192a3b82e2586942b0a418d876dde38165d8a05f8aa5baafe6475fe4d0b0bb6ab1d8e65bc343f91d76b68518dca38c981826d8fa55ad07bbe1def69daa13863cfbc794d4df64a563ed6c5c4076182a6abdf816b4572b9b51ed743907b5c37fe442dff6e852dcb6416defee68ad299d6d9ce75221b82a12a7439048a89528d4334afa425784494bceff4f905d5333978bd0a3de804263e60a921166ee192df1999021e9008102e1044a1332c8d0eec922eab09fdfffc7e08ef73d6214a4a1af45cc801e3d707451811b4f57763519003e120d48886b6a45df617a8b18d2b872017c4a937aae5a76eb77f0d34fb576429c6c21db44b432b24574a175cf2ee54d45d25125614d3a1738c935214b7561b9acfa101dbcf2c7ac0e2283823c8b6f7db1832cea89e9cc074fe000d832e8ded24f629993fdd5135d68b94bccf6da5ec2ee42fdb27697b915c34d2824632c587313810da3d665f4cb01f8fa93edecca608354ac15bf46fc345820bc346142fd91c9ecbf1fee9ba432459670840e22bc5588dac9bf3a9d6190994ef638e5f13f0732a68d0ffb38bbb8db7524eacff1c08a99b838f5cc2f0957b70b17cdc7ed78970b3e9e53e04868b5d8ed6db15594915f73f222994bd223333c510e33478000a31b444252f97564a68aed58229d0e40f8dde6124d4522952fd20f4f000d1c2c85ed33a4b3e4f7caca0767959771de3c01bd6e925b90a2313f894d44c67fae56d377ab16197a5a9b929ac9d9fc98e133f718dbe87f333739f403f409e123b0781efa87fd6ae87224c76941205f22d08a6109145e353aecd91e74bdf8f970700675a2f434699b9a18bf2ef5ac1132ece287e0704f4b2f30ba9896efa658cfe9de0641a2d2ad172f56129b95f694301602ce1000000000000000000000000",
        feeLimit: FEE_LIMIT
    };
    const transactionResult = await shieldedUtils.makeAndSendTransaction(
        tronWeb, shieldedTRC20ContractAddress,
        'transfer(bytes32[10][],bytes32[2][],bytes32[9][],bytes32[2],bytes32[21][])',
        options, [], tronWeb.defaultAddress.base58);
    console.log("transactionResult: " + util.inspect(transactionResult));
    assert.ok(transactionResult);
    assert.ok(transactionResult.result);
    let createTxId = transactionResult.transaction.txID;
    console.log("createTxId: " + createTxId)
    assert.equal(createTxId.length, 64);
    let createInfo;
    while (true) {
        createInfo = await tronWeb.trx.getTransactionInfo(createTxId);
        if (Object.keys(createInfo).length === 0) {
            await wait(3);
            continue;
        } else {
            console.log("createInfo:" + util.inspect(createInfo))
            break;
        }
    }
    assert.equal(createInfo.receipt.result, "SUCCESS");
}

async function createBurnParams1V1T() {
    const options = {
        shieldedParameter: "269a629a4d95fce7a56a16a1c7a2a7c991719f9fb50ee2eb285ef518c3c87452c193e4bbd34b8b7a318f8679004a7dd7ebb45c12e53fe32344d906da8841f40f4e38eaa7a53385d2814ccb5aeeebac6a0149fb41b861d7223afc813e13a6a6df7fef045cfe937468c87a0e5e00484eab0b0e4efa1cfc4dae1729ead84b198f1b9995a3443ac32bbdb85b358532d8dc9a7907b3d6b9081c9870bd9c0d2cac5a463bf32d47f4091e92cdcc9ab3e2fd9348b8445c0376a073df2d1ca963a113b99ce26e00c953ee38e8243a1d08e4886d12e78017aa89d40d7520d3ea8ab93af36519fa1c9911b4fdce5b54ad3b2277b9256f9d295e397d4e6f28d695c12aeaf4203b5095f607b8260962798eed88f4ff17986036ceb86bfee709595293ca0b0424b6079458ac5d085ff6dc959819604d58858b23326b003ad889d90f0a4976be5de4a6a19b8fb125750eb2f3d4b227030921ea88dacade05a095aa53a9226006c1cdd29d449a772723c95385264ac4654aa05440808cf06c16b3d1520baf0022070000000000000000000000000000000000000000000000000000000000000014eefdb71e1d239df5bbe7c0f528c20a6fcd26714ef87ddd357e4d5de58f41010c416d5f0122a82c41f0a789c21cf1a2dfe46bef405a190614e0f8c93e15ed92000000000000000000000000415624c12e308b03a1a6b21d9b86e3942fac1ab92b18427215b3a8c526c95074633c1bff082450fbe2236c8f283273e2860bf14613bc2c9698734e2db29bf585bb0afcc32e090d1ce8a7ea44fc49f8dd3fd00cc02d57ba3d797210b30abb5da112b7f7cbde0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        feeLimit: FEE_LIMIT
    }
    const transactionResult = await shieldedUtils.makeAndSendTransaction(
        tronWeb, await tronWeb.address.toHex(shieldedTRC20ContractAddress),
        'burn(bytes32[10],bytes32[2],uint256,bytes32[2],address,bytes32[3],bytes32[9][],bytes32[21][])',
        options, [], tronWeb.defaultAddress.base58);
    console.log(
        "transactionResult: " + util.inspect(transactionResult, true, null,
        true))
    assert.ok(transactionResult && transactionResult.result);
    let createTxId = transactionResult.transaction.txID;
    console.log("createTxId: " + createTxId)
    assert.equal(createTxId.length, 64);
    let createInfo;
    while (true) {
        createInfo = await tronWeb.trx.getTransactionInfo(createTxId);
        if (Object.keys(createInfo).length === 0) {
            await wait(3);
            continue;
        } else {
            console.log("createInfo:" + util.inspect(createInfo))
            break;
        }
    }
    assert.equal(createInfo.receipt.result, "SUCCESS");
}

async function createBurnParamsWithoutAsk1V1T() {
    // makeAndSendTransaction
    const options = {
        shieldedParameter: "64df1deddfdc9ba2f9f768d28bd09de1eca35f8f4ef8eaa5d6a55dc13a25fce1dd4f0f5fd0a987af2d497261c96c7d1f2e896e988354a8e0ee4ad0c792861916bf4781359a615c96bb8f5675c209a75b4810f49a951ebda515b00c9aa2a85c5cb14ac268c0f5e651e537dd7bf4f7b5d4d8e6c8a1ea1b3ee67a6f855e7efbd8cf8205441f2214790c5a7e9b4cf083edb5060df7444044a6ccf246dcd5dab577b0c9d19c3197e102a33480a46281c17a318053967c1d0e70246755ac1c50e80b86c8850155bd5db8ac73a0a197871f82b08e8c902518fb0cae44e4c7d3f8dcaa7512a95d478994dad116ee0c16cd93b3a35e4c3372fab4842256b87ad6ca8ff76157dae1cbb05c1567dfdcbfd5364d0a5ea9ee1823f28e1348797dc1ebcaa8910c9883a3819c775f31ca6c7b260f48be824e08deb8077e79c47a919a8b195a2d9a2d35b2662525b0be449f12ecb51f7d81c6d57d6f52e17bb8ec94b21df9ef60f307c2f03df799968f33697347da94089d53eae80960747cc11c79990e3a60b60200000000000000000000000000000000000000000000000000000000000000147958a6c676e633f9a7ccce05245b231f9eef4069abf4fd82c9f44314659fc1bef2c78e885762d20bf92c87f823ba66cea155fd442eb9a8f0918d9ed27ff164090000000000000000000000415624c12e308b03a1a6b21d9b86e3942fac1ab92bec1389fd7d8c1a71e3061f9ae58c4ccc8379df0d4c95a3686ba463faf1e6dc9282d36fb895107fdad4e2744e67198082d227ca20d4ebef4b514444dfea4525707435e2463bfad39d913d8c3a2aa2a6dd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        feeLimit: FEE_LIMIT
    }
    const transactionResult = await shieldedUtils.makeAndSendTransaction(
        tronWeb, await tronWeb.address.fromHex(shieldedTRC20ContractAddress),
        'burn(bytes32[10],bytes32[2],uint256,bytes32[2],address,bytes32[3],bytes32[9][],bytes32[21][])',
        options, [], tronWeb.defaultAddress.base58);
    console.log(
        "transactionResult: " + util.inspect(transactionResult, true, null,
        true))
    assert.ok(transactionResult && transactionResult.result);
    let createTxId = transactionResult.transaction.txID;
    console.log("createTxId: " + createTxId)
    assert.equal(createTxId.length, 64);
    let createInfo;
    while (true) {
        createInfo = await tronWeb.trx.getTransactionInfo(createTxId);
        if (Object.keys(createInfo).length === 0) {
            await wait(3);
            continue;
        } else {
            console.log("createInfo:" + util.inspect(createInfo))
            break;
        }
    }
    assert.equal(createInfo.receipt.result, "SUCCESS");
}

async function ztron2TestAll(){
    await before();
    // await createTransferParams1V2();
    // await createTransferParams2V2();
    // await createTransferParams2V1();
    // await createTransferParamsWithoutAsk1V2();
    // await createTransferParamsWithoutAsk2V2();
    // await createTransferParamsWithoutAsk2V1();
    // await createBurnParams1V1T();
    await createBurnParamsWithoutAsk1V1T();
}
export{
    ztron2TestAll
}
